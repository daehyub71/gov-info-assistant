# 1. 환경 파일 생성
cp .env.example .env

# 2. 가상환경 생성 및 활성화
python3 -m venv venv
source venv/bin/activate  # Linux/Mac
# 또는 venv\Scripts\activate  # Windows

# 3. 의존성 설치
pip install --upgrade pip
pip install -r requirements.txt
pip install -r requirements-client.txt

# 4. 환경 변수 확인
# .env 파일에서 Azure OpenAI 설정이 올바른지 확인


# 1. 현재 상태 확인
git status

# 2. .env 파일을 gitignore에 추가되어 있는지 확인 (민감한 정보 보호)
# .gitignore 파일에 .env가 포함되어 있어야 함

# 3. 모든 파일을 스테이징 영역에 추가 (.env는 자동으로 제외됨)
git add .

# 4. 커밋 생성
git commit -m "feat: Day 1 프로젝트 환경 구축 완료

- 프로젝트 기본 구조 생성
- requirements.txt (서버용) 및 requirements-client.txt (클라이언트용) 작성
- Python 3.13 호환성 수정 및 의존성 충돌 해결
- Docker 환경 구성 (서버/클라이언트 분리)
- .env.example 환경 설정 템플릿 추가
- LangFuse 모니터링 시스템 통합
- Azure OpenAI 연동 설정"

# 5. GitHub 원격 저장소에 푸시
git push origin main


# 모든 테스트 실행
pytest

# 단위 테스트만 실행
pytest -m unit

# 커버리지 포함 실행
pytest --cov=fastapi_server --cov-report=html

# 특정 파일 테스트
pytest tests/test_health_api.py -v

# 기본 헬스체크
curl http://localhost:8000/api/v1/health/

# 상세 헬스체크
curl http://localhost:8000/api/v1/health/detailed

# 준비 상태 확인
curl http://localhost:8000/api/v1/health/readiness

# 생존 상태 확인  
curl http://localhost:8000/api/v1/health/liveness

# 개발 서버 실행
uvicorn fastapi_server.main:app --host 0.0.0.0 --port 8000 --reload

# 또는 Python 모듈로 실행
python -m uvicorn fastapi_server.main:app --host 0.0.0.0 --port 8000 --reload


# Terminal 1: FastAPI 서버 실행
cd fastapi_server
uvicorn main:app --reload --port 8000

# Terminal 2: Streamlit 클라이언트 실행
cd streamlit_app  
streamlit run main.py --server.port 8501

# 프로젝트 루트로 이동
cd C:\data_analysis\gov-info-assistant

# 모듈 형태로 실행
python -m streamlit run streamlit_app/main.py --server.port 8501